
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-postgres-deployment
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}-deployment
    meta.helm.sh/release-namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-postgres
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        args:
        - -c
        - config_file=/var/lib/postgresql/data/pgdata/postgresql.conf
        ports:
        - containerPort: {{ .Values.database.port }}
        resources:
          requests:
            memory: "192Mi"
            cpu: "200m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: DB_USER
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-configmap
              key: DB_NAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secrets
              key: DB_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "md5"
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
        # Mount configuration directly into PGDATA so Postgres actually loads it
        - mountPath: /var/lib/postgresql/data/pgdata/postgresql.conf
          name: postgres-config
          subPath: postgresql.conf
        - mountPath: /var/lib/postgresql/data/pgdata/pg_hba.conf
          name: postgres-config
          subPath: pg_hba.conf
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER) 
            - -d
            - $(POSTGRES_DB)  
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-postgres-pvc-v2
      - name: postgres-config
        configMap:
          name: {{ .Release.Name }}-postgres-config
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-postgres-service
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}-deployment
    meta.helm.sh/release-namespace: {{ .Values.namespace }}
spec:
  selector:
    app: {{ .Release.Name }}-postgres
  ports:
  - port: {{ .Values.database.port }}
    targetPort: {{ .Values.database.port }}
    protocol: {{ .Values.database.protocol }}
  type: {{ .Values.database.type }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-postgres-pvc-v2
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Release.Name }}-postgres-service
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}-deployment
    meta.helm.sh/release-namespace: {{ .Values.namespace }}
spec:
  storageClassName: {{ .Values.storage.storageClass }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi 
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-postgres-pv-v2
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}-deployment
    meta.helm.sh/release-namespace: {{ .Values.namespace }}
spec:
  storageClassName: {{ .Values.storage.storageClass }}
  capacity:
    storage: 1Gi  
  accessModes:
    - ReadWriteOnce  
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/data/postgres"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-postgres-config
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}-deployment
    meta.helm.sh/release-namespace: {{ .Values.namespace }}
data:
  postgresql.conf: |
    listen_addresses = '*'
    port = 5432
    max_connections = 100
    shared_buffers = 128MB
    dynamic_shared_memory_type = posix
    log_timezone = 'UTC'
    datestyle = 'iso, mdy'
    timezone = 'UTC'
    lc_messages = 'en_US.utf8'
    lc_monetary = 'en_US.utf8'
    lc_numeric = 'en_US.utf8'
    lc_time = 'en_US.utf8'
    default_text_search_config = 'pg_catalog.english'
    hba_file = '/etc/postgresql/pg_hba.conf'
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    # Allow connections from Kubernetes cluster network
    host    all             all             10.42.0.0/16            md5
    host    all             all             10.0.0.0/8              md5
    # Allow connections from any IP (less secure, use only if needed)
    host    {{ .Values.database.name }}   {{ .Values.database.user }}    10.42.0.0/16            md5

---
