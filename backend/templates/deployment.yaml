apiVersion: apps/v1
kind: Deployment
metadata:
  name: lmwfitness-backend-deployment
  namespace: {{ .Values.namespace }}
  labels:
    app: backend
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: lmwfitness-backend
    app.kubernetes.io/name: backend
  annotations:
    meta.helm.sh/release-name: lmwfitness-backend-deployment
    meta.helm.sh/release-namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: backend
      app.kubernetes.io/instance: lmwfitness-backend
  template:
    metadata:
      labels:
        app: backend
        app.kubernetes.io/instance: lmwfitness-backend
    spec:
      initContainers:
      - name: wait-for-postgres
        image: busybox
        command: 
        - "bash"
        - "-c"
        - "until (echo > /dev/tcp/lmwfitness-backend-postgres-service.lmw-fitness.svc.cluster.local/5432) 2>/dev/null; do echo waiting for postgres; sleep 20; done;"
        resources:
          requests:
            memory: "16Mi"
            cpu: "50m"
          limits:
            memory: "32Mi"
            cpu: "100m"
      containers:
      - name: debug-shell
        image: nicolaka/netshoot
        command: [ "sleep", "3600" ]
        stdin: true
        tty: true
      - name: backend
        image: {{ .Values.api.image.repository }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.api.port }}
          name: http
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "200m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        envFrom:
        - configMapRef:
            name: lmwfitness-backend-configmap
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api.secretName }}
              key: DB_PASSWORD
        - name: SMTP_PASSWORD 
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api.secretName }}
              key: SMTP_PASSWORD
        - name: RECAPTCHA_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api.secretName }}
              key: RECAPTCHA_SECRET
        - name: ACCESS_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api.secretName }}
              key: ACCESS_SECRET_KEY
        - name: REFRESH_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api.secretName }}
              key: REFRESH_SECRET_KEY
        - name: BREVO_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.api.secretName }}
              key: BREVO_API_KEY
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.endpoint }}
            port: {{ .Values.api.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.endpoint }}
            port: {{ .Values.api.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
        startupProbe:
          httpGet:
            path: {{ .Values.readinessProbe.endpoint }}
            port: {{ .Values.api.port }}
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 30
          timeoutSeconds: 5